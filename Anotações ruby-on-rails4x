#CURSO RUBY ON RAILS#
Primeiro passo - Criar o arquivo Gemfile para instalar as gems de um projeto
>No arquivo Gemfile criado, mostrar onde deve buscar o repositório, no caso digitar:
source 'https://rubygems.org'
>> No arquivo Gemfile mostrar quais gems devem ser instaladas, depois ir no terminal e digitar bundle install no repositório onde está o Gemfile

#AULA 008 - Instalando um novo projeto 
>> Para criar um projeto de Ruby on rails deve digitar no terminal
>> rails new /nome do projeto/ , assim ja cria a pasta do projeto na raiz de onde esta no terminal
>> Para instalar a versão do rails para o projeto que deseja deve digitar

>> rails _VERSAO_ nomeprojeto
>> ex : rails _4.0.0_ new teste exemplo

>> criar um projeto para um banco de dados específico
>> rails new meuapp --database=mysql (EXEMPLO TA???)
>> por padrão vem configurado o sqlite3
>> Da para ver em qual pasta está configurado a database
>> config/database.ymi

>>> Para ver as opções do rails é só digitar rails no terminal

>> Para não instalar o bundleinstall no final da criação do novo programa rails
>> Digitar -B no final
>> ex : rails new teste -B 
>> Assim se estiver sem internet, não vai verificar online as gems e buscar instalação das mesmas

>> Para renomear um projeto rails deve renomear 2 arquivos
>>> config/application.rb  >> na frente do Módulo
>>> config/initializers/session_store.rb 
>>> Também é muito válido usar a gem Rename

na Gemfile >> gem 'rename'

rails g rename:app_to Novo_nome

#AULA 009
>> estudo sobre as pastas dos projetos

#AULA 010 - Sobre Ruby, IRB e PRY
>> Para executar um arquivo ruby é só digitar
>> ruby meuarquivo.rb
>>>>> Para criar um arquivo ruby, só digitar touch meurquivo.rb

>> IRB - é um modo bom para testes de aplicações ruby
>> só digitar IRB no terminal que abre.

>> Pry é um repl, onde você escreve e interpreta, muito parecido com o IRB
>> É uma alternativa mais poderosa do irb.
>>> Pry e o irb são mt úteis para testes.


#AULA 011 - Orientação a objetos em uma AULA
>> Classes são as formas de se fazer um objeto, como se fosse a planta de uma casa
>> Objeto é a classe pronta, como uma casa gerada por uma planta, onde eu posso fazer diferentes objetos de uma mesma classe
>> Atributos, são as definições de um objeto, como exemplo um carro: O tipo de roda, tipo de motor, cor executar
>> Métodos é o que este objeto faz, seria equivalente a função que ele executa.
>>> NO RUBY TUDO É OBJETO!

>> Para eu saber qual é a classe de um objeto
>> a = 1
>> a.class 

>> para saber a object id de um objeto
>> a = 1
>> a.object_id
>> meio que mostra a id deste objeto
>> isto vindo depois do ., são métodos disponiveis no ruby.

#AULA 012 - Entrada pardão STDIN

>> Gets é ler a string que foi digitado, igual input no python
>>\n e chomp
>>> \n ele pula a linha

>>> NOTA: Quando digita algo e aperta enter, ele digita automaticamente um \n
>>> por isso é utilizado o método chomp
>>> usar gets.chomp

>> para tranformar um tipo em outro usar os métodos
>>> .to_f para transformar em float
>>> .to_i para transformar em integer
>>> .to_s para trasnfromar em string

>>estruturas condicionais, if, else, case na aula 012.1.rb

>> estruturas condicionais - condicional ternário -
>>> Parecido com o excel
>>> (condição) ? (resultado verdadeiro) : (resultado falso)
>>> ? significa então

>>repetição while, until, for e each

#AULA 013 - VETOR / ARRAY

>> para declarar um vetor, basta ele estar entre colchetes

v = [15,62,73,48]

>> puts v.inspec irá mostrar o ARRAY
>> Se pedir apenas puts v, irá mostrar os elementos sequencialmente.

>> puts v[2] imprime o numero no indice 2
>> a = Array.new #cria um array
    a.push (36) #adiciona itens no array
    a.inspect

    a.push (etc) adiciona o que você quiser no array.

>>> ARGV, eu escrevo os parametros que eu quero direto no terminal
exemplo ruby aula013.1.rb Bruno Padilha
imprime : ["bruno", "padilha"]

ARGV da para fazer contas e tudo mais, mas tem que transformar a string em inteiro.

>>> Hashes IMPORTANTE

Hashes é como o dicionario em python, sendo declarado a chave e o valor para equivalente
h = {"a" => 123, "b"=> 324}

Para mostrar o a puts ["a"]

>>> para adicionar mais um elemento no hash, usar o .merge

h.merge!({"c" => 7319})

>>>>>>>>DICA<<<<<< geralmente quando se usa o ponto de exclamação em um método, é pq vai mudar algo
o .merge! vai mudar o hash


#AULA 014 - Brincando com strings

>>Para interpolar strings usar : #{} 
Ex: nomes = %w(Bruno Padilha Rangel)
    x = "Olá, "
    nomes.each do |nome| #pega cada nome na variavel nomes e imprime
        puts "#{x}#{nome} "
    end

Para criar vetor com nomes usar o %w
>>> exemplo : y = %w (Bruno Padilha Rangel)
saida : ["Bruno","Padilha","Rangel"]


>>> Concatenando strings, usando + ou <<

Ex : 
puts "Ruby " + "on " + "Rails " + nomes[0]
puts "Ruby " << "on " << "Rails " << nomes[0]

>>> Para substituir string, usar

usar o .gsub (Substituição global)

texto ="Ruby " << "on " << "Rails " << nomes[0]
puts texto.gsub("Bruno", "O melhor curso") #SUBSTITUI APENAS TEMPORARIAMENTE

>>>DICA<<< Para substituir integralmente usar o ! depois do gsub.

puts texto.gsub!("Bruno", "O melhor curso") 

>>>> Strings x Simbols
    "hello" x :hello

>> Simbols é uma string imutável

>> Ela geralmente serve para identificar alguma coisa
>>é muito usado como um identificador em um hash pois é uma chave que não pode mudar

h = {:a => 123, :b => "Bruno"} que é equivalente a h = {a: 123, b: "Bruno"}
ao invez de
h = {"a" => 123, "b" => "Bruno"}

